
package com.nrimarriagebureu.user.adapter;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.nrimarriagebureu.user.R;
import com.nrimarriagebureu.user.bean.MatchMakerBean;
import com.nrimarriagebureu.user.utility.SessionManager;
import com.nrimarriagebureu.user.utility.Utility;
import com.squareup.picasso.Picasso;

import java.util.List;


public class MatchMakerListAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
    private List<MatchMakerBean> arrayList;
    private ItemListener myListener;
    private Context mContext;
    private String type;


    public final int TYPE_LOAD = 1;
    private final int TYPE_ACCEPTED = 2;
    private final int TYPE_REJECTED = 3;
    private final int TYPE_PENDING = 4;

    private OnLoadMoreListener loadMoreListener;
    private boolean isLoading = false, isMoreDataAvailable = true;
    private SessionManager session;
    private int placeHolderId;
    private String selectedMsg;

    private Fragment fragment;

    public MatchMakerListAdapter(Context mContext, List<MatchMakerBean> arrayList, String type, Fragment fragment) {
        this.arrayList = arrayList;
        this.type = type;
        this.mContext = mContext;
        session = new SessionManager(mContext);
        placeHolderId = session.getPlaceHolderDrawableId();
        this.fragment = fragment;
    }

    public void setListener(ItemListener listener) {
        myListener = listener;
    }


    @Override
    public int getItemCount() {
        return arrayList.size();
    }

    @Override
    public int getItemViewType(int position) {
        if (!arrayList.get(position).getMatriId().equals(mContext.getString(R.string.str_loading))) {
            switch (type) {
                case "Accepted":
                    return TYPE_ACCEPTED;
                case "Rejected":
                    return TYPE_REJECTED;
                case "Pending":
                    return TYPE_PENDING;
                default:
                    return TYPE_ACCEPTED;
            }
        } else {
            return TYPE_LOAD;
        }
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        LayoutInflater inflater = LayoutInflater.from(mContext);
        if (viewType == TYPE_LOAD) {
            return new LoadHolder(inflater.inflate(R.layout.cell_load, parent, false));
        } else {
            return new ViewHolder(inflater.inflate(R.layout.cell_match_maker_list, parent, false));
        }
    }


    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
        if (position >= getItemCount() - 1 && isMoreDataAvailable && !isLoading && loadMoreListener != null) {
            isLoading = true;
            loadMoreListener.onLoadMore();
        }

        if (getItemViewType(position) == TYPE_ACCEPTED || getItemViewType(position) == TYPE_PENDING || getItemViewType(position) == TYPE_REJECTED) {
            MatchMakerBean matchMakerBean = arrayList.get(position);

            ((ViewHolder) holder).lblTitle.setText(matchMakerBean.getMatriId());
            //((ViewHolder) holder).lblInterest.setText("Interest sent " + interestBean.getReceiverResponse());
            //((ViewHolder) holder).lblStatus.setText(interestBean.getReceiverResponse());

            ((ViewHolder) holder).btnAccept.setVisibility(View.GONE);
            ((ViewHolder) holder).btnReject.setVisibility(View.GONE);

            if (getItemViewType(position) == TYPE_ACCEPTED) {
                ((ViewHolder) holder).lblStatus.setText("Accepted");
                ((ViewHolder) holder).btnReject.setVisibility(View.VISIBLE);
            }

            if (getItemViewType(position) == TYPE_REJECTED) {
                ((ViewHolder) holder).lblStatus.setText("Rejected");
                ((ViewHolder) holder).btnAccept.setVisibility(View.VISIBLE);
            }

            if (getItemViewType(position) == TYPE_PENDING) {
                ((ViewHolder) holder).lblStatus.setText("Pending");
                ((ViewHolder) holder).btnAccept.setVisibility(View.VISIBLE);
                ((ViewHolder) holder).btnReject.setVisibility(View.VISIBLE);
            }

            String description = Utility.getDetailsFromValue(matchMakerBean.getBirthdate(), matchMakerBean.getHeight(),
                    matchMakerBean.getCasteName(), matchMakerBean.getReligionName(),
                    matchMakerBean.getCityName(), matchMakerBean.getCountryName(), "", false);
            ((ViewHolder) holder).lblDetail.setText(description);


            if (matchMakerBean.getPhoto1() != null) {
                Picasso.get()
                        .load(matchMakerBean.getPhoto1())
                        .placeholder(placeHolderId)
                        .error(placeHolderId)
                        .fit()
                        // .resize(0, imageWidthHeight)
                        .centerCrop()
                        .into(((ViewHolder) holder).imgProfile);
            } else {
                ((ViewHolder) holder).imgProfile.setImageResource(placeHolderId);
            }
        }
    }

    private String getValueString(String str) {
        String tempStr = mContext.getString(R.string.lbl_not_available);
        if (str != null && str.length() > 0) return str;
        else return tempStr;
    }

    public interface ItemListener {
        void sendRejectRequest(MatchMakerBean item);

        void sendAcceptRequest(MatchMakerBean item);

        void openUserProfile(MatchMakerBean item);
    }

    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
        private TextView lblTitle, lblDetail, lblStatus;
        private ImageView imgProfile;
        private TextView btnAccept, btnReject;

        public ViewHolder(View view) {
            super(view);

            lblTitle = view.findViewById(R.id.lblTitle);
            lblDetail = view.findViewById(R.id.lblDetail);
            lblStatus = view.findViewById(R.id.lblStatus);
            imgProfile = view.findViewById(R.id.imgProfile);

            btnAccept = view.findViewById(R.id.btnAccept);
            btnReject = view.findViewById(R.id.btnReject);

            btnReject.setOnClickListener(this);
            btnAccept.setOnClickListener(this);

            imgProfile.setOnClickListener(this);
            lblTitle.setOnClickListener(this);
            //view.setOnClickListener(this);
        }

        @Override
        public void onClick(View v) {
            if (myListener != null && getAdapterPosition() != RecyclerView.NO_POSITION) {
                MatchMakerBean matchMakerBean = arrayList.get(getAdapterPosition());
                if (v.getId() == R.id.imgProfile || v.getId() == R.id.lblTitle) {
                    myListener.openUserProfile(matchMakerBean);
                } else if(v.getId() == R.id.btnReject){
                    myListener.sendRejectRequest(matchMakerBean);
                } else if(v.getId() == R.id.btnAccept){
                    myListener.sendAcceptRequest(matchMakerBean);
                }

            }
        }
    }

    static class LoadHolder extends RecyclerView.ViewHolder {
        public LoadHolder(View itemView) {
            super(itemView);
        }
    }

    public void setMoreDataAvailable(boolean moreDataAvailable) {
        isMoreDataAvailable = moreDataAvailable;
    }

    /* notifyDataSetChanged is final method so we can't override it
         call adapter.notifyDataChanged(); after update the list
         */
    public void notifyDataChanged() {
        notifyDataSetChanged();
        isLoading = false;
    }

    public interface OnLoadMoreListener {
        void onLoadMore();
    }

    public void setLoadMoreListener(OnLoadMoreListener loadMoreListener) {
        this.loadMoreListener = loadMoreListener;
    }

}
                                