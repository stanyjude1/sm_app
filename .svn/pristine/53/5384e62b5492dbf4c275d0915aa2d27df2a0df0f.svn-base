package com.nrimarriagebureu.user.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import com.nrimarriagebureu.user.R;
import com.nrimarriagebureu.user.activity.MatchMakerActivity;
import com.nrimarriagebureu.user.activity.UserProfileActivity;
import com.nrimarriagebureu.user.adapter.MatchMakerListAdapter;
import com.nrimarriagebureu.user.bean.MatchMakerBean;
import com.nrimarriagebureu.user.retrofit.AppApiService;
import com.nrimarriagebureu.user.retrofit.RetrofitClient;
import com.nrimarriagebureu.user.utility.AppConstants;
import com.nrimarriagebureu.user.utility.AppDebugLog;
import com.nrimarriagebureu.user.utility.ConnectionDetector;
import com.nrimarriagebureu.user.utility.SessionManager;
import com.nrimarriagebureu.user.utility.Utility;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;

public class MatchMakerFragment extends Fragment implements MatchMakerListAdapter.ItemListener {
    private RecyclerView recyclerView;
    private TextView lblNoRecordsFound;
    private MatchMakerListAdapter adapter;
    private List<MatchMakerBean> arrayList = new ArrayList<>();

    private View view;

    private SessionManager session;
    private RelativeLayout layoutProgressBar;

    private int pageNumber = 1;
    private String type = "Accepted";

    //Retrofit related
    private Retrofit retrofit;
    private AppApiService appApiService;

    public MatchMakerFragment() {
        // Required empty public constructor
    }

    public static MatchMakerFragment newInstance(String type) {
        AppDebugLog.print("type in newInstance : " + type);
        MatchMakerFragment fragment = new MatchMakerFragment();
        Bundle bundle = new Bundle();
        bundle.putString("type", type);
        fragment.setArguments(bundle);
        return fragment;
    }

    public void tabChanged() {
        AppDebugLog.print("Tab Changed");
        pageNumber = 1;
        arrayList.clear();

        if (lblNoRecordsFound != null) {
            lblNoRecordsFound.setVisibility(View.GONE);
        }

        initializeRecyclerView();
        getPersonalizedList();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        AppDebugLog.print("type in onCreate : " + type);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        view = inflater.inflate(R.layout.fragment_match_maker, container, false);

        initialize();

        return view;
    }

    private void initialize() {
        Bundle bundle = this.getArguments();
        if (bundle != null) {
            if (bundle.containsKey("type")) {
                type = bundle.getString("type");
            }
        }

        session = new SessionManager(getActivity());
        retrofit = RetrofitClient.getClientWithHeaderAfterLogin();
        appApiService = retrofit.create(AppApiService.class);

        MatchMakerActivity matchMakerActivity = (MatchMakerActivity) getActivity();
        if (matchMakerActivity.isFirstTimeApiCallFromInitialize) {
            AppDebugLog.print("Api call from initialize");
            matchMakerActivity.isFirstTimeApiCallFromInitialize = false;
            pageNumber = 1;
            arrayList.clear();

            initializeRecyclerView();
            getPersonalizedList();
        }
    }

    private void getPersonalizedList() {
        if (!ConnectionDetector.isConnectingToInternet(getActivity())) {
            Utility.showToast(getActivity(), getString(R.string.err_msg_no_intenet_connection));
            return;
        }

        if (pageNumber == 1)
            showProgressLayout();

        Map<String, String> params = new HashMap<>();
        params.put("user_id", session.getUserData(SessionManager.USER_ID));
        params.put("page_number", String.valueOf(pageNumber));
        params.put("status_match", type);

        for (String string : params.values()) {
            //AppDebugLog.print("params : " + string + "\n");
        }

        Call<JsonObject> call = appApiService.getPersonalizedList(params);
        call.enqueue(new Callback<JsonObject>() {
            @Override
            public void onResponse(Call<JsonObject> call, Response<JsonObject> response) {
                hideProgressLayout();
                JsonObject data = response.body();
                AppDebugLog.print("response in getPersonalizedList : " + data);
                if (data != null) {
                    if (Integer.valueOf(data.get("statuscode").getAsString()) == 1002) {
                        Utility.showToast(getActivity(), data.get("message").getAsString());
                        session.logoutUser();
                        return;
                    }
                    if (data.has("tocken"))
                        session.setUserData(SessionManager.CSRF_TOKEN, data.get("tocken").getAsString());
                    if (Integer.valueOf(data.get("statuscode").getAsString()) == 200) {
                        Gson gson = new GsonBuilder().setDateFormat(AppConstants.GSONDateTimeFormat).create();
                        List<MatchMakerBean> tempArrayList = gson.fromJson(data.getAsJsonArray("data"), new TypeToken<List<MatchMakerBean>>() {
                        }.getType());
                        //initializeRecyclerView();

                        //when tempArrayList size > 0
                        if (tempArrayList.size() > 0 && arrayList.size() > 0) {
                            //remove loading view
                            arrayList.remove(arrayList.size() - 1);
                            arrayList.addAll(tempArrayList);
                            adapter.notifyDataChanged();
                        }

                        //when activity start
                        if (arrayList.size() == 0) {
                            arrayList.addAll(tempArrayList);
                            initializeRecyclerView();
                        }

                        //when new product list size == 0
                        if (tempArrayList.size() == 0 && arrayList.size() > 0) {
                            //not more data available on server
                            adapter.setMoreDataAvailable(false);
                            //remove loading view
                            arrayList.remove(arrayList.size() - 1);
                            adapter.notifyDataChanged();
                        }
                        setVisibilityNoRecordsFound();
                    } else {
                        //not more data available on server
                        adapter.setMoreDataAvailable(false);
                        if (arrayList.size() > 0) {
                            //remove loading view
                            arrayList.remove(arrayList.size() - 1);
                            adapter.notifyDataChanged();
                        } else {
                            Utility.showToast(getActivity(), data.get("message").getAsString());
                        }
                        setVisibilityNoRecordsFound();
                    }
                } else {
                    Utility.showToast(getActivity(), getString(R.string.err_msg_something_went_wrong));
                }
            }

            @Override
            public void onFailure(Call<JsonObject> call, Throwable t) {
                AppDebugLog.print("error in getPersonalizedList : " + t.getMessage());
                Utility.showToast(getActivity(), getString(R.string.err_msg_something_went_wrong));
                hideProgressLayout();
            }
        });
    }

    private void sendAcceptOrRejectRequest(Map<String, String> params) {
        if (!ConnectionDetector.isConnectingToInternet(getActivity())) {
            Utility.showToast(getActivity(), getString(R.string.err_msg_no_intenet_connection));
            return;
        }

        showProgressLayout();

        AppDebugLog.print("params : " + params.toString());

        Call<JsonObject> call = appApiService.sendUpdateMatchMakerStatusRequest(params);
        call.enqueue(new Callback<JsonObject>() {
            @Override
            public void onResponse(Call<JsonObject> call, Response<JsonObject> response) {
                hideProgressLayout();
                JsonObject data = response.body();
                AppDebugLog.print("response in sendAcceptOrRejectRequest : " + data);
                if (data != null) {
                    if (Integer.valueOf(data.get("statuscode").getAsString()) == 1002) {
                        Utility.showToast(getActivity(), data.get("message").getAsString());
                        session.logoutUser();
                        return;
                    }
                    if (data.has("tocken"))
                        session.setUserData(SessionManager.CSRF_TOKEN, data.get("tocken").getAsString());
                    Utility.showToast(getActivity(), data.get("message").getAsString());

                    if (Integer.valueOf(data.get("statuscode").getAsString()) == 200) {
                        pageNumber = 1;
                        arrayList.clear();
                        getPersonalizedList();
                    }
                } else {
                    Utility.showToast(getActivity(), getString(R.string.err_msg_something_went_wrong));
                }
            }

            @Override
            public void onFailure(Call<JsonObject> call, Throwable t) {
                AppDebugLog.print("error in sendInterestAcceptOrRejectRequest : " + t.getMessage());
                Utility.showToast(getActivity(), getString(R.string.err_msg_something_went_wrong));
                hideProgressLayout();
            }
        });
    }

    private void initializeRecyclerView() {
        recyclerView = view.findViewById(R.id.recyclerView);
        lblNoRecordsFound = view.findViewById(R.id.lblNoRecordsFound);
        adapter = new MatchMakerListAdapter(getActivity(), arrayList, type, this);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);
        // mLayoutManager.setAutoMeasureEnabled(true);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(mLayoutManager);
        recyclerView.setItemAnimator(new DefaultItemAnimator());
        adapter.setListener(this);
        adapter.setLoadMoreListener(() -> {
            recyclerView.post(() -> {
                if (arrayList.size() == 10)//if in total data count is less then 10 then not call api second time
                    loadMore();// a method which requests remote data
            });
            //Calling loadMore function in Runnable to fix the
            // java.lang.IllegalStateException: Cannot call this method while RecyclerView is computing a layout or scrolling error
        });
        recyclerView.setAdapter(adapter);
    }

    /**
     * Load more task on scroll task list
     */
    private void loadMore() {
        try {
            pageNumber++;
            //add loading progress view
            AppDebugLog.print("In loadMore");
            MatchMakerBean matchMakerBean = new MatchMakerBean();
            matchMakerBean.setMatriId(getString(R.string.str_loading));
            arrayList.add(matchMakerBean);
            getPersonalizedList();
            adapter.notifyItemInserted(arrayList.size() - 1);
        } catch (Exception e) {
            e.printStackTrace();
            AppDebugLog.print("Exception : " + e.getMessage());
        }
    }


    @Override
    public void openUserProfile(MatchMakerBean item) {
        AppDebugLog.print("user id in openUserProfile : " + item.getIndexId());
        Intent i = new Intent(getActivity(), UserProfileActivity.class);
        i.putExtra(AppConstants.KEY_MEMBER_ID, item.getMatriId());
        startActivity(i);
    }

    @Override
    public void sendAcceptRequest(MatchMakerBean item) {
        Map<String, String> params = new HashMap<>();
        params.put("user_id", session.getUserData(SessionManager.USER_ID));
        params.put("other_id", item.getOtherId());
        params.put("update_status", "accept");
        sendAcceptOrRejectRequest(params);
    }

    @Override
    public void sendRejectRequest(MatchMakerBean item) {
        Map<String, String> params = new HashMap<>();
        params.put("user_id", session.getUserData(SessionManager.USER_ID));
        params.put("other_id", item.getOtherId());
        params.put("update_status", "reject");
        sendAcceptOrRejectRequest(params);
    }

    private void setVisibilityNoRecordsFound() {
        if (arrayList.size() == 0)
            lblNoRecordsFound.setVisibility(View.VISIBLE);
        else
            lblNoRecordsFound.setVisibility(View.GONE);
    }

    //Todo show progress layout
    private void showProgressLayout() {
        layoutProgressBar = view.findViewById(R.id.layoutProgressBar);
        layoutProgressBar.setVisibility(View.VISIBLE);
    }

    //Todo hide progress layout
    private void hideProgressLayout() {
        layoutProgressBar.setVisibility(View.GONE);
    }
}
