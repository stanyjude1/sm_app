package com.safinaz.matrimony.Activities;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.design.widget.NavigationView;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.safinaz.matrimony.Adapter.MenuListAdapter;
import com.safinaz.matrimony.Application.MyApplication;
import com.safinaz.matrimony.Fragments.ExclusiveDashboardFragment;
import com.safinaz.matrimony.Model.MenuChild;
import com.safinaz.matrimony.Model.MenuGroup;
import com.safinaz.matrimony.R;
import com.safinaz.matrimony.Utility.Common;
import com.safinaz.matrimony.Utility.SessionManager;
import com.safinaz.matrimony.Utility.Utils;
import com.squareup.picasso.Picasso;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class ExclusiveDashboardActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
    private final static String CLICK_TAG_CHANGE_PASSWORD = "change_password";
    private final static String CLICK_TAG_MANAGE_PHOTO = "manage_photo";
    //private final static String CLICK_TAG_MANAGE_ACCOUNT = "manage_account";
    private final static String CLICK_TAG_UPLOAD_VIDEO = "upload_video";
    private final static String CLICK_TAG_UPLOAD_ID = "upload_id";
    private final static String CLICK_TAG_UPLOAD_HOROSCOPE = "upload_horoscope";
    private final static String CLICK_TAG_PHOTO_PASSWORD = "photo_password";
    private final static String CLICK_TAG_ADMIN_MATCHES = "matches_admin";
    private final static String CLICK_TAG_LOGOUT = "logout";
    //not click action handled
    private final static String CLICK_TAG_MY_PROFILE = "profile";

    TextView tv_edit_profile, tv_name, tv_matri_id;
    Common common;
    SessionManager session;
    ExpandableListView list_menu;
    private Button btn_member;
    boolean doubleBackToExitPressedOnce = false;
    ProgressDialog pd;
    public ImageView imgProfile;
    private int placeHolder, photoProtectPlaceHolder;
    private boolean isRequiredCurrentPlanData = true;

    private ExclusiveDashboardFragment exclusiveDashboardFragment;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        session = new SessionManager(this);
        if (!session.isLoggedIn()) {
            startActivity(new Intent(this, LoginActivity.class));
            finish();
        }
        setContentView(R.layout.activity_exclusive_dashboard);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        common = new Common(this);

        if (session.getLoginData(SessionManager.KEY_GENDER).equals("Male")) {
            photoProtectPlaceHolder = R.drawable.photopassword_male;
            placeHolder = R.drawable.male;
        } else if (session.getLoginData(SessionManager.KEY_GENDER).equals("Female")) {
            photoProtectPlaceHolder = R.drawable.photopassword_female;
            placeHolder = R.drawable.female;
        }

        // Create and set Android Fragment as default.
        exclusiveDashboardFragment = new ExclusiveDashboardFragment();
        // Begin Fragment transaction.
        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();
        // Replace the layout holder with the required Fragment object.
        fragmentTransaction.replace(R.id.frame_layout, exclusiveDashboardFragment);
        // Commit the Fragment replace action.
        fragmentTransaction.commit();

        final DrawerLayout drawer = findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        View headerView = navigationView.getHeaderView(0);
        tv_edit_profile = headerView.findViewById(R.id.tv_edit_profile);
        tv_name =  headerView.findViewById(R.id.tv_name);
        tv_matri_id =headerView.findViewById(R.id.tv_matri_id);
        imgProfile = headerView.findViewById(R.id.imgProfile);
        //lay_header=(LinearLayout) headerView.findViewById(R.id.lay_header);
        common.setDrawableLeftTextView(R.drawable.eye_white, tv_edit_profile);

        btn_member = findViewById(R.id.btn_member);

        initMenu();

        btn_member.setOnClickListener(view -> {
            startActivity(new Intent(ExclusiveDashboardActivity.this, PlanListActivity.class));
            drawer.closeDrawer(GravityCompat.START);
        });

        tv_edit_profile.setVisibility(View.GONE);

        getMyprofile();
    }

    @Override
    protected void onResume() {
        super.onResume();
        Log.d("dashresume", "onResume");
    }

    private void getCurrentPlan() {
        HashMap<String, String> param = new HashMap<>();
        param.put("matri_id", session.getLoginData(SessionManager.KEY_matri_id));
        common.makePostRequest(Utils.check_plan, param, response -> {
            if (pd != null)
                pd.dismiss();
            try {
                JSONObject object = new JSONObject(response);
                MyApplication.setPlan(object.getBoolean("is_show"));

            } catch (JSONException e) {
                if (pd != null)
                    pd.dismiss();
                e.printStackTrace();
            }
        }, error -> {
            if (pd != null)
                pd.dismiss();
        });
    }

    public void getMyprofile() {
        pd=new ProgressDialog(this);
        pd.setIndeterminate(true);
        pd.setMessage("Loading...");
        pd.setCancelable(false);
        pd.show();

        HashMap<String, String> param = new HashMap<>();
        param.put("member_id", session.getLoginData(SessionManager.KEY_USER_ID));
        common.makePostRequest(Utils.get_my_profile, param, response -> {
            if (pd != null)
                pd.dismiss();
            try {
                JSONObject object = new JSONObject(response);
                JSONObject data = object.getJSONObject("data");

                exclusiveDashboardFragment.setUserProfile(data);

                tv_name.setText(data.getString("username"));
                tv_matri_id.setText(data.getString("matri_id"));

                if (!data.getString("photo1").equals(""))
                    Picasso.get().load(data.getString("photo1")).placeholder(placeHolder).error(placeHolder).into(imgProfile);
                else {
                    imgProfile.setImageResource(placeHolder);
                }

                if(isRequiredCurrentPlanData) {
                    isRequiredCurrentPlanData = false;
                    getCurrentPlan();
                }
            } catch (JSONException e) {
                e.printStackTrace();
                common.showToast(getString(R.string.err_msg_try_again_later));
            }
        }, error -> {
            if (pd != null)
                pd.dismiss();
            if (error.networkResponse != null) {
                common.showToast(Common.getErrorMessageFromErrorCode(error.networkResponse.statusCode));
            }
        });
    }

    private void initMenu() {
        list_menu = findViewById(R.id.list_menu);
        final DrawerLayout drawer = findViewById(R.id.drawer_layout);

        final List<MenuGroup> list = new ArrayList<>();
        MenuGroup grp;

        List<MenuChild> pro = new ArrayList<MenuChild>();
        pro.add(new MenuChild("Change Password", CLICK_TAG_CHANGE_PASSWORD));
        pro.add(new MenuChild("Manage Photos", CLICK_TAG_MANAGE_PHOTO));
       // pro.add(new MenuChild("Manage Account", CLICK_TAG_MANAGE_ACCOUNT));
        pro.add(new MenuChild("Upload Video", CLICK_TAG_UPLOAD_VIDEO));
        pro.add(new MenuChild("Upload ID Proof", CLICK_TAG_UPLOAD_ID));
        pro.add(new MenuChild("Upload Horoscope", CLICK_TAG_UPLOAD_HOROSCOPE));

        grp = new MenuGroup("My Profile", R.drawable.user_fill_pink, pro, CLICK_TAG_MY_PROFILE);
        list.add(grp);

        grp = new MenuGroup("Matches from admin", R.drawable.custom_match, new ArrayList<MenuChild>(), CLICK_TAG_ADMIN_MATCHES);
        list.add(grp);

        grp = new MenuGroup("Logout", R.drawable.logout, new ArrayList<MenuChild>(), CLICK_TAG_LOGOUT);
        list.add(grp);

        MenuListAdapter adapter = new MenuListAdapter(this, list);
        list_menu.setAdapter(adapter);

        list_menu.setOnChildClickListener((expandableListView, view, group, child, l) -> {
            switch (list.get(group).getChildren().get(child).getClickTag()) {
                case CLICK_TAG_CHANGE_PASSWORD:
                    startActivity(new Intent(ExclusiveDashboardActivity.this, ChangePasswordActivity.class));
                    break;
                case CLICK_TAG_MANAGE_PHOTO:
                    startActivity(new Intent(ExclusiveDashboardActivity.this, ManagePhotosActivity.class));
                    break;
//                case CLICK_TAG_MANAGE_ACCOUNT:
//                    startActivity(new Intent(ExclusiveDashboardActivity.this, ManageAccountActivity.class));
//                    break;
                case CLICK_TAG_UPLOAD_VIDEO:
                    startActivity(new Intent(ExclusiveDashboardActivity.this, UploadVideoActivity.class));
                    break;
                case CLICK_TAG_UPLOAD_ID:
                    Intent id = new Intent(ExclusiveDashboardActivity.this, UploadIdAndHoroscopeActivity.class);
                    id.putExtra("page_tag", "id");
                    startActivity(id);
                    break;
                case CLICK_TAG_UPLOAD_HOROSCOPE:
                    Intent horo = new Intent(ExclusiveDashboardActivity.this, UploadIdAndHoroscopeActivity.class);
                    horo.putExtra("page_tag", "horoscope");
                    startActivity(horo);
                    break;

            }
            drawer.closeDrawer(GravityCompat.START);
            return true;
        });

        list_menu.setOnGroupClickListener((expandableListView, view, i, l) -> {
            switch (list.get(i).getClickTag()) {
                case CLICK_TAG_PHOTO_PASSWORD:
                    startActivity(new Intent(ExclusiveDashboardActivity.this, PhotoPasswordActivity.class));
                    drawer.closeDrawer(GravityCompat.START);
                    break;
                case CLICK_TAG_ADMIN_MATCHES:
                    startActivity(new Intent(ExclusiveDashboardActivity.this, MatchMakerActivity.class));
                    drawer.closeDrawer(GravityCompat.START);
                    break;
                case CLICK_TAG_LOGOUT:
                    conformLogout();
                    drawer.closeDrawer(GravityCompat.START);
                    break;
            }

            return false;
        });


    }

    private void conformLogout() {
        AlertDialog.Builder alert = new AlertDialog.Builder(ExclusiveDashboardActivity.this);
        alert.setMessage("Are you sure you want logout from this app?");
        alert.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                session.logoutUser();
            }
        });
        alert.setNegativeButton("No", null);
        alert.show();
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            if (doubleBackToExitPressedOnce) {
                Intent intent = new Intent(Intent.ACTION_MAIN);
                intent.addCategory(Intent.CATEGORY_HOME);
                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);//***Change Here***
                startActivity(intent);
                finish();
                System.exit(0);
                return;
            }

            this.doubleBackToExitPressedOnce = true;
            Toast.makeText(getApplicationContext(), "Please click BACK again to exit", Toast.LENGTH_SHORT).show();

            new Handler().postDelayed(new Runnable() {

                @Override
                public void run() {
                    doubleBackToExitPressedOnce = false;
                }
            }, 2000);
        }
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

}
